from types import TracebackType
from typing import IO, Iterable, Iterator, List, Optional, Type

class NullFile(IO[str]):
    def close(self) -> None:
        ...

    def isatty(self) -> bool:
        ...

    def read(self, __n: int = 1) -> str:
        ...

    def readable(self) -> bool:
        ...

    def readline(self, __limit: int = 1) -> str:
        ...

    def readlines(self, __hint: int = 1) -> List[str]:
        ...

    def seek(self, __offset: int, __whence: int = 1) -> int:
        ...

    def seekable(self) -> bool:
        ...

    def tell(self) -> int:
        ...

    def truncate(self, __size: int = 1) -> int:
        ...

    def writable(self) -> bool:
        ...

    def writelines(self, __lines: Iterable[str]) -> None:
        ...

    def __next__(self) -> str:
        ...

    def __iter__(self) -> Iterator[str]:
        ...

    def __enter__(self) -> 'NullFile':
        ...

    def __exit__(self, __t: Optional[Type[BaseException]], __value: Optional[BaseException], __traceback: Optional[TracebackType]) -> None:
        ...

    def write(self, text: str) -> int:
        ...

    def flush(self) -> None:
        ...

    def fileno(self) -> int:
        ...

NULL_FILE: NullFile